generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

enum UserRole {
  USER
  ADMIN
  RESTAURANT
  DRIVER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
}

enum MenuCategory {
  APPETIZER
  MAIN
  DESSERT
  BEVERAGE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  phone     String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  restaurant Restaurant?
  driver     DeliveryDriver?
  orders     Order[]
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  description String
  image       String?
  rating      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id])
  menu    MenuItem[]
  orders  Order[]
}

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  category    MenuCategory
  available   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

model Order {
  id        String      @id @default(uuid())
  status    OrderStatus @default(PENDING)
  total     Float
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  // Relations
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  driverId     String?
  driver       DeliveryDriver? @relation(fields: [driverId], references: [id])
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DeliveryDriver {
  id        String   @id @default(uuid())
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]
} 